正则学习

字符串操作
indexOf            查找
substring          获取子个字符
charAt             获取某个字符
split              分割字符串，获得数组

正则：也叫做规则，让计算机能够读懂人类的规则
正则的两种写法
var re=// ;                简写方式，性能好，推介  里面不需要用引号表示字符串了
var re=new RegExp();       全写方式，在某种情况需要下才使用  当正则需要传参的时候，一定要用全称的写法

正则表达式常用的方法
test            正则去匹配字符串，如果匹配成功就返回真，如果匹配失败就返回假
    字符串判断
        返回真假
        正则.test(字符串)

search          正则去匹配字符串，如果匹配成功，就返回匹配成功的位置，如果匹配失败就返回-1
    字符串搜索
        反回出现的位置  或 -1
        字符串.search(正则)
        正则中的默认,是区分大小写的
        忽略大小写：i     (ignore)  加在正则表达式后面 re=//i

match          正则去匹配字符串，如果匹配成功，就返回匹配成功的数组，如果匹配不成功，就返回null
    获取匹配的项目
        返回数组 或 null
        量词：+ （+表示至少出现一次） (匹配不确定的位置)
        字符串.match(正则)
        全局匹配：g   (global)
        正则默认：正则匹配成功就会结束，不会继发匹配，如果想全部查找，就要加标识 g （全局匹配） re=/\d+/g
        可以用子项，当match 不加 g (全局匹配的时候才可以获取到子项的集合)



replace         正则去匹配字符串，匹配成功的字符去替换成新的字符串
    返回替换后的字符串
    字符串.replace(正则，第二个参数)    第二个参数（新的字符串），可以以是字符串，
                                    也可以是一个回调函数，回调函数的第一个参数，就是匹配成功的字符


 转义字符:  (\)
 .     任意字符         \.    表示 真正的.
\s     空格
\S     非空格
\d     数字
\D     非数字
\w     字符 （字母，数字，下划线_）
\W     非字符 (其他的，比喻，汉字，假名，其他......)
\b     独立的部分  （起始，结束，空格） 规定了匹配的位置周围前后的情况，
                    \b在正则前，就要求匹配的前面要是起始部位或前面有空格 
                    \b在正则后，就要求匹配的后面要是结束的部位或后面是空格
\B     非独立的部分

\1     \n  代表重复的子项  
        \1代表第一个子项所匹配到的结果(结果，在此做为正则用来匹配)，
        \2代表第二个字项匹配到的结果(结果，在此做为正则用来匹配)
        var re=/\w\w/    可以匹配 c9 cc 99
        var re=/(\w)\1/  可以匹配 cc 99   但不能匹配c9  因为此外（\w)匹配的结果为c后\1就表是c而不是（\w)了

|      表示 或 的意思

匹配子项： 小括号 （）   （还有另外一个意思，分组操作）

把正则的整体叫做（母亲）
然后把左边第一个小括号里面的正则，叫做第一个子项（母亲的第一个孩子）
第二个小括号就是第二个孩子 
            replace 第二个参数的回调函数的，第一个参数 （母亲），第二个参数是第一个子项
            第三个参数是 第二个子项

正则表达式中的字符类  []  (中括号表示字符类)   （字符类：一组相似的元素）
[] 中括号的整体代表一个字符 (里面的字符是 或 的关系)

^    如果^写在[]里面的话，就表于排除的意思 （取反，不取字符类中的）

-    表示范围  [a-z] 表示从a到z  [e-g] 表示从e到z   必须 从小到大  [a-z0-9A-Z]代表这个范围中的一位


量词： {}
{4，7}  表示：最少出现4次，最多出现7次
{4，}   表示：最少出现4次
{4}     表示：正好出现4次
+       表示：{1,}   至少出现1次
?       表示：{0，1} 出现0次或者1次
*       表示：{0，}  至少出现0次

^     放在正则最开始的位置，就代表起始的意思
$     放在正则的最后的位置，就代表结束的意思
      /^[1-9]\d{4,11}$/  表示起始的位置必是一个1到9的数字，结束位置必须是4至11位的数字

常见的表单验证的正则
匹配中文：[\u4e00-\u9fa5]
行首行尾空格：^\s*|\s*$
Email：^\w+@[a-z0-9]+(\.[a-z]+){1,3}$
网址：[a-zA-z]+://[^\s]*
QQ号：[1-9][0-9]{4,9}
邮政编码：[1-9]\d{5}
身份证：[1-9]\d{14}|[1-9]\d{17}|[1-9]\d{16}x